#include "ramabot_brain.cpp"

#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <pgrcamera_driver/TakePicAction.h>
#include <boost/bind.hpp>

#include "FlyCapture2.h"

#define SERIAL_LEFT 13200942
#define SERIAL_RIGHT 13200944

using namespace FlyCapture2;
using namespace cv;


int main(int argc, char** argv)
{
  ros::init(argc, argv, "irobot_waypoint_brain");
  ros::NodeHandle n;
  cv::namedWindow("right",CV_WINDOW_NORMAL);
  cv::namedWindow("left",CV_WINDOW_NORMAL);

  actionlib::SimpleActionClient<pgrcamera_driver::TakePicAction> ac("take_pic", true); //First argument in ac constructor is the server to connect to

  cv::Mat image_left,image_right;

  image_transport::ImageTransport it(n);
  image_transport::Subscriber pic_left=it.subscribe("/stereo/left/image_rect_color",1,boost::bind(convert_image,_1,&image_left));
  image_transport::Subscriber pic_right=it.subscribe("/stereo/right/image_rect_color",1,boost::bind(convert_image,_1,&image_right));

  pgrcamera_driver::TakePicGoal goal;
  goal.acquire=true;
  
  ros::Rate loop_rate(60);

  bool updated=false;
  bool started=false;
  int count=601;
  char exit=-1;
	
  std::cout<<"\n Initiating Camera... \n";

  //ping camera driver and wait for it to start
  while (ros::ok() && !updated)
  {
	ac.waitForServer();
	ac.sendGoal(goal);

	if (!image_left.empty() && !image_right.empty())
	{
		imshow("right",image_right);
		imshow("left",image_left);
		cv::waitKey(30);
		updated = true;

	}

	ros::spinOnce();
	loop_rate.sleep();
  }

//  rama_commander commander;
//  rama_robot robot;

//  commander.loadWaypoints();
//  commander.loadTargets();

//  robot_state_pub = n.advertise<geometry_msgs::Point>("robot/state", 1);
//  robot_target_pub = n.advertise<geometry_msgs::Point>("robot/target", 1);

//  waypoint_pub = n.advertise<geometry_msgs::Point>("robot/waypoint", 1);
//  
//  pid_state_sub = n.subscribe<geometry_msgs::Point>("robot/pid_state", 1, pidCallback);

//  printf("Robot : Hi! Please press 'any key + enter' to start the waypoint tracking...\n");
//  robot.waitForEnter();

//  int robot_wpt_count = 0;

  while (ros::ok()){}

  return 0;
}
