#ifndef __LIB_AUCTION_H____
#define __LIB_AUCTION_H____

#include <stdio.h>
#include <stdlib.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/MultiArrayLayout.h>
#include <std_msgs/MultiArrayDimension.h>
#include <std_msgs/Bool.h>

#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>

#include "lib_robot.cpp"

#include <map>

#define NUM_WPT 13
#define NUM_TARGET 4

Eigen::MatrixXf Targets(NUM_TARGET, 3);

ros::Publisher robot_record_pub;
ros::Publisher robot_reqbackup_pub;
ros::Publisher robot_backup_pub;
ros::Subscriber peer_record_sub;
ros::Subscriber peer_reqbackup_sub;
ros::Subscriber peer_backup_sub;

geometry_msgs::Point goal_msg;
geometry_msgs::Point target_msg;

std::map<int, Eigen::MatrixXf> EntryList;
std::map< int, std::map<int, Eigen::MatrixXf> > WaypointList;

// ***************************** Auction data *********************************** //
std_msgs::Float32MultiArray robot_record;
Eigen::VectorXf my_visit_history(NUM_TARGET+1); // Every entry has value from 0  to 1. 0 means never choose this target, 1 means this target has been finished.
					      // Note: The bid put on this target cannot exceed 1, since bid =  1/(1+distance);
Eigen::VectorXf peer_visit_history(NUM_TARGET+1), last_peer_history(NUM_TARGET+1);
bool available_target_list[NUM_TARGET];
int robot_working_state = 0; // 1 = transit, 2 = busy, 3 = done;
bool propose_auction = false;
bool reach_agreement = false;
bool next_waypointlist_set = false;
bool current_target_done = true;
bool receive_peer_response = false;

bool receive_peer_backup = false;
bool receive_request_for_backup = false;
std_msgs::Bool backup_request;
bool no_work_for_me = false;
bool no_work_for_peer = false;

bool dealing_with_auction_request = false;

//Eigen::VectorXf CamPos(3), ocam_hand(3), ohand_world(3), ocam_world(3), q_h(4), q_cam(4);
//Eigen::Matrix3f Rot_h2w, Rot_c2h, Rot_c2w;

//*************************** Global supervised data ***************************//

class rama_commander
{
  public:
    rama_commander();
    // Auction
    void loadAuctionTargets();
    void loadAuctionEntryList();
    void loadAuctionWaypointList();
    void showEntryList();
    void showWaypointList(int index_target, int index_entry);

    void chooseAuctionWaypointList(bool propose_auction);
    NearestEntry getAuctionNearestEntry();
    void peerRecordCallback(const std_msgs::Float32MultiArray::ConstPtr& array);
    void doAuction();
    void peerReqBackupCallback(const std_msgs::Bool::ConstPtr& request);
    void peerBackupCallback(const std_msgs::Float32MultiArray::ConstPtr& array);
    void sendAuctionWaypoint();
    void nextAuctionWaypoint();
    bool checkAllTargetDone();
    void Next2CurrentWaypointList();

    // For simulation
    void generateOcamPosition();
    void recordSimPosition();

  private:  
    int wpt_count; 
    int goal_target;
    int fx;
    int fy;
    // For Auction
    int which_waypoint_in_current_list;
    int ping_count;

    // For simulation
    int sim_count;
    double sim_time;
    double start_time;
    double duration;
};

int getNumberofLine(std::string filename);
void recordImages(int count, cv::Mat image_left, cv::Mat image_right);
void recordCamPose();
void recordCamPoseTime(double current_time);

bool detectObstacles();
Eigen::VectorXf obstacle(2);
void collisionAvoidance();

#endif
