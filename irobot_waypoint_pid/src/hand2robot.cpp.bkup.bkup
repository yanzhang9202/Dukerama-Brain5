// This node transform the hand pose from VRPN (in type of geometry_msgs/TransformStamped) to the robot pose.
// This node is built assuming the servo is fixed on the neutral position, 1500us. The Rot_r2h is actually Rot_r2n, n means neutral position of servo.
// Created by Yan Zhang, on Aug 21st, 2015.

#include "h2rlibrary.h"

void h2rCallback(const geometry_msgs::TransformStamped msg);

int main(int argc, char **argv)
{
  ros::init(argc, argv, "hand2robot");
  ros::NodeHandle node; 
  ros::Rate loop_rate(100); // This is the frequency how fast the robot updates its position, it should be larger than the controller frequency.

  ros::Subscriber h2r_sub = node.subscribe("/Brain5Camera/pose", 100, h2rCallback);

  ros::Publisher r_pub = node.advertise<geometry_msgs::TransformStamped>("/Brain5Robot/pose", 100);

  // MAIN LOOP
  while( ros::ok() )
  {
    ros::spinOnce();

    // Publish the robot pose;
    r_pub.publish(msg_r);

    loop_rate.sleep();
  }

  return 0;
}

void h2rCallback(const geometry_msgs::TransformStamped msg)
{
//   ROS_INFO("Get it ! \n");

//  trans_h2r << 1, 0, 0,
//               0, 1, 0,
//               0, 0, 1;
//  std::cout << trans_h2r << std::endl;

    q_h[0] =msg.transform.rotation.x;
    q_h[1] =msg.transform.rotation.y;
    q_h[2] =msg.transform.rotation.z;
    q_h[3] =msg.transform.rotation.w;
  
    Eigen::Quaternionf quat_h(q_h[3], q_h[0], q_h[1], q_h[2]);

//    q_h = quat_h.coeffs(); // the Quaternion.coeffs return coefficients in [x, y, z, w] order.

//    ROS_INFO("I heard %f ...", q_h[0]);

    Rot_h2w = quat_h.matrix(); // Return the hand2world rotation matrix;

//    std::cout << Rot_h2w << "\n" << std::endl;

   // Initialize the Rot_r2h transformation matrix. This should be included in a class definition in the future!

//    Rot_r2h << 0.4540, -0.8910, 0,
//	       0.8910, 0.4540, 0,
//    	       0,      0,      1;

    Rot_r2h << -0.2097, -0.9776, 0,
	        0.9776, -0.2097, 0,
    	        0,      0,      1;

    Rot_r2w = Rot_h2w * Rot_r2h; // Get the robot2world rotation matrix.

    // Input the translation vector and quaternion of robot to msg to be published. Think about what type of msgs are appropriate to be published.

//    std::cout << Rot_r2w << "\n" << std::endl;

    aa_r = Rot_r2w;
    Eigen::Quaternionf quat_r(aa_r);
    
    q_r = quat_r.coeffs(); // returned in [x, y, z, w] order.

    msg_r.transform.rotation.x = q_r[0];
    msg_r.transform.rotation.y = q_r[1];
    msg_r.transform.rotation.z = q_r[2];
    msg_r.transform.rotation.w = q_r[3];

    msg_r.transform.translation.x = msg.transform.translation.x;
    msg_r.transform.translation.y = msg.transform.translation.y;
    msg_r.transform.translation.z = msg.transform.translation.z; 
}
