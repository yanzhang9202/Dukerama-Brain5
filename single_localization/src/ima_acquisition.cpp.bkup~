// Edited by Yan Zhang, 06/01/2015

#include "iostream"
#include "fstream"

#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include "ros/ros.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <pgrcamera_driver/TakePicAction.h>
#include <boost/bind.hpp>

#include <vector>
#include <stdio.h>
#include <stdlib.h>

#include "FlyCapture2.h"

#define SERIAL_LEFT 13200942
#define SERIAL_RIGHT 13200944

using namespace FlyCapture2;
using namespace cv;

void waitFor(unsigned int secs){
	unsigned int retTime;
	retTime = time(0) + secs;
	while (time(0) < retTime);
}
void waitForEnter(){
	string Enter;
	std::cin >> Enter;
}
void convert_image(const sensor_msgs::ImageConstPtr& msg,Mat* image){
  sensor_msgs::Image imag=*msg;
  cv_bridge::CvImagePtr cv_ptr;
  ros::spinOnce();
    try
      {
        cv_ptr = cv_bridge::toCvCopy(msg,"bgr8");                                                                                                                  
       }
    catch (cv_bridge::Exception& e)
      {
        ROS_ERROR("cv_bridge exception: %s", e.what());
        return;
      }
    cv::Mat image_out=cv_ptr->image;
    image_out.copyTo(*image);//left_images.push(image_out);                                                                         
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "inputScanner");
  ros::NodeHandle n;
  cv::namedWindow("right",CV_WINDOW_NORMAL);
  cv::namedWindow("left",CV_WINDOW_NORMAL);
  
  std::ofstream outfile_left("/home/dukerama/catkin_ws/src/single_localization/include/detector/cords_left.txt");
  std::ofstream outfile_right("/home/dukerama/catkin_ws/src/single_localization/include/detector/cords_right.txt");

  actionlib::SimpleActionClient<pgrcamera_driver::TakePicAction> ac("take_pic", true); //First argument in ac constructor is the server to connect to

  cv::Mat image_left,image_right;

  std::string myself="Brain5Camera";

  image_transport::ImageTransport it(n);
  image_transport::Subscriber pic_left=it.subscribe("/stereo/left/image_raw",1,boost::bind(convert_image,_1,&image_left));
  image_transport::Subscriber pic_right=it.subscribe("/stereo/right/image_raw",1,boost::bind(convert_image,_1,&image_right));

  pgrcamera_driver::TakePicGoal goal;
  goal.acquire=true;
  
  ros::Rate loop_rate(60);

  bool updated=false;
  bool started=false;
  int count=601;
  char exit=-1;

  int num_ima=0;

  ros::Time now=ros::Time::now();
  ros::Time last=ros::Time::now();

  int update_cnt = 1;
  
	
  std::cout<<"\n Initiating Camera... \n";

  //ping camera driver and wait for it to start
  while (ros::ok() && !updated)
  {
	ac.waitForServer();
	ac.sendGoal(goal);

	if (!image_left.empty() && !image_right.empty())
	{
		imshow("right",image_right);
		imshow("left",image_left);
		cv::waitKey(30);
		updated = true;

	}
	

	ros::spinOnce();
	loop_rate.sleep();
  }

	int edgeThresh = 1;
	int const lowThreshold = 30;
	int const max_lowThreshold = 100;
	int ratio = 3;
	int kernel_size = 3;	

  while (ros::ok() && num_ima<3)
    {
	//Set up station
	std::cout<<"\n Set up your station: ";
	std::cout<<num_ima;
	waitForEnter();
	
	//take picture
	ac.sendGoal(goal);
	ac.waitForResult();
	ac.sendGoal(goal);
	ac.waitForResult();
	ac.sendGoal(goal);
	ac.waitForResult();
	ros::spinOnce();
	loop_rate.sleep();

	//show image to image window
	imshow("right",image_right);
	imshow("left",image_left);
	cv::waitKey(30);
	
	//write image to file
	char filename_left[512];
	sprintf( filename_left, "/home/dukerama/catkin_ws/src/single_localization/include/calib_images/left%d.bmp", count );
	char filename_right[512];
	sprintf( filename_right, "/home/dukerama/catkin_ws/src/single_localizatoin/include/calib_images/right%d.bmp", count );
	imwrite(filename_left,image_left);
	imwrite(filename_right,image_right);

	cv::Mat image_left_gray, image_left_out, image_right_gray;

	// Canny Detector Sample on OpenCV documentation
	
	cv::Mat dst_left, dst_right, detected_edges_left, detected_edges_right;

	dst_left.create(image_left.size(), image_left.type());
	dst_right.create(image_right.size(), image_right.type());

	cv::cvtColor(image_left, image_left_gray, CV_BGR2GRAY);
	cv::cvtColor(image_right, image_right_gray, CV_BGR2GRAY);

//	/// Reduce noise with a kernel 3x3
//	//cv::blur( image_left_gray, detected_edges, Size(3,3) );	
        cv::GaussianBlur(image_left_gray,detected_edges_left,cv::Size(5,5),2,2);
	cv::GaussianBlur(image_right_gray,detected_edges_right,cv::Size(5,5),2,2);
	
	std::vector<cv::Vec3f> circles_left, circles_right;
        cv::HoughCircles( detected_edges_left, circles_left, CV_HOUGH_GRADIENT, 1, dst_left.cols/20, 90, 60, 0, 100);
	cv::HoughCircles( detected_edges_right, circles_right, CV_HOUGH_GRADIENT, 1, dst_left.cols/20, 90, 60, 0, 100);

	for (size_t i = 0; i < circles_left.size(); i++ )
		{
			std::cout <<"one target detected on left" << std::endl;
			cv::Point center(cvRound(circles_left[i][0]), cvRound(circles_left[i][1]));
			int radius = cvRound(circles_left[i][2]);
			circle( image_left, center, 3, Scalar(0, 255, 0), -1, 8, 0 );
			circle( image_left, center, radius, Scalar(0, 0, 255), 3, 8, 0 );
			outfile_left << circles_left[i][0] << " ";
			outfile_left << circles_left[i][1] << " ";
			outfile_left << circles_left[i][2] << " ";
		}
	outfile_left << "\n";

	for (size_t i = 0; i < circles_right.size(); i++ )
		{
			std::cout <<"one target detected on right" << std::endl;
			cv::Point center(cvRound(circles_right[i][0]), cvRound(circles_right[i][1]));
			int radius = cvRound(circles_right[i][2]);
			circle( image_right, center, 3, Scalar(0, 255, 0), -1, 8, 0 );
			circle( image_right, center, radius, Scalar(0, 0, 255), 3, 8, 0 );
			outfile_right << circles_right[i][0] << " ";
			outfile_right << circles_right[i][1] << " ";
			outfile_right << circles_right[i][2] << " ";
		}
	outfile_right << "\n";

	cv::namedWindow("Hough Display of Left", CV_WINDOW_NORMAL);
	imshow("Hough Display of Left", image_left);	
	cv::waitKey(30);

	char filename_detector_left[512];
	sprintf( filename_detector_left, "/home/dukerama/catkin_ws/src/single_localization/include/detector/left%d.bmp", count );
	imwrite(filename_detector_left,image_left);	

	cv::namedWindow("Hough Display of Right", CV_WINDOW_NORMAL);
	imshow("Hough Display of Right", image_right);	
	cv::waitKey(30);

	char filename_detector_right[512];
	sprintf( filename_detector_right, "/home/dukerama/catkin_ws/src/single_localization/include/detector/right%d.bmp", count );
	imwrite(filename_detector_right,image_right);

	num_ima++;
	count++;
	
    }


  printf( "\nFinished grabbing images\n" );
  //outfile.close();
  
  return 0;
}
